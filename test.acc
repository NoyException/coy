fn %func_0(%var_0: i32) -> i32 {
%Lfunc_0_START:
let %0 = alloca i32, 1
let %1 = store %var_0, %0
let %2 = alloca i32, 1
let %3 = load %0
let %4 = eq %3, 1
br %4, label %LIF_TRUE_0, label %LIF_FALSE_1
%LIF_TRUE_0:
let %5 = store 1, %2
jmp label %Lfunc_0_RETURN
%LIF_FALSE_1:
let %6 = alloca i32, 1
let %7 = load %0
let %8 = load %0
let %9 = sub %8, 1
let %10 = call %func_0, %9
let %11 = mul %7, %10
let %12 = store %11, %6
let %13 = load %6
let %14 = store %13, %2
jmp label %Lfunc_0_RETURN
%LIF_EXIT_2:
let %15 = store 0, %2
jmp label %Lfunc_0_RETURN
%Lfunc_0_RETURN:
let %16 = load %2
ret %16
}
fn %main() -> () {
%Lmain_START:
let %17 = alloca i32, 20
let %18 = offset i32, %17, [2 < 10], [1 < 2]
let %19 = load %18
let %20 = store 4, %19
let %21 = alloca i32, 1
let %22 = offset i32, %17, [2 < 10], [1 < 2]
let %23 = load %22
let %24 = call %func_0, %23
let %25 = store %24, %21
let %26 = load %21
let %27 = call %putint, %26
jmp label %Lmain_RETURN
%Lmain_RETURN:
ret ()
}